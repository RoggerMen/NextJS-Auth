"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src/middleware",{

/***/ "(middleware)/./src/middleware.ts":
/*!***************************!*\
  !*** ./src/middleware.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/auth */ \"(middleware)/./src/auth.ts\");\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/server */ \"(middleware)/./node_modules/next/dist/esm/api/server.js\");\n//Protege rutas con autenticación usando la función auth como middleware.\n// borramos el as middleware que tenia\n// ERA ASI export { auth as middleware } from \"@/auth\"\n// PERO NOS SALDRIA ERROR PORQUE NECESITA IMPORTAR LO SIGUIENTE Y YA NO EXPORTAR\n// Y IMPORTAMOS ESE \"auth\" DE EL ARCHIVO \"auth.ts\" donde sale los metodos signIn, signOut, etc\n\n\n// EXPORTAMOS POR DEFECTO LA FUNCION QUE ES EL \"auth\" \n// Y DENTRO DE ESE \"auth\" CREAMOS UNA FUNCION ASINCRONA\n// DONDE VAMOS A PONER NUESTRA LOGICA EXTRA PARA PROTEGER NUESTRA RUTA\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_auth__WEBPACK_IMPORTED_MODULE_0__.auth)(async (req)=>{\n    // \"pathname\" va almacenar la ruta a la que se esta intentando ingresar\n    // ESO ES LO QUE MANEJA EL \"middleware\"\n    // Y LA OBTENEMOS DE \"req.nextUrl.pathname\"\n    // \"pathname\" LO QUE CONTIENE ES LA RUTA A LA QUE APUNTAMOS A IR O NAVEGAR\n    const pathname = req.nextUrl.pathname;\n    // CON ESTOS VEMOS COMO FUNCIONA OSEA COMO NOS DA LA RUTA\n    //console.log(pathname);\n    // LE COLOCAMOS ESTO PARA QUE TODO FUNCIONE BIEN\n    //return NextResponse.next();\n    // DECLARAMOS \"session\" Y OBTENEMOS LA \"session\" de \"next auth\"\n    const session = await (0,_auth__WEBPACK_IMPORTED_MODULE_0__.auth)();\n    // ESTO ES PARA PROTEGER CUANDO YA EL USUARIO ESTA DENTRO DE LA PAGINA DESPUES DE \"INICIAR SESION\" Y CUANDO EN LA RUTA DEL NAVEGADOR PONGA \"/login\" O \"/register\" YA NO LOS PERMITA IR AHI PORQUE YA ESTAN DENTRO AUNTENTICADOS Y SOLO PODRIAN VERLO SI \"CIERRAN SESION\"\n    // ACA LE DECIMOS QUE SI LA \"session\" EXISTE Y LA RUTA EN LA QUE YO ESTOY ACTUALMENTE ES \"/login\"\n    // O SI LA RUTA EN LA QUE YO ESTOY ES \"/register\"\n    // A ESTO LE COLOCAMOS parentesis\"()\" pathname == \"/login\" || pathname == \"/register\"\n    // PARA QUE REALICE LA VALIDACION EN CONJUNTA \n    // ENTONCES SI ES ALGUNA DE ESAS 2 Y LA \"session\" EXISTE\n    // YO QUIERO QUE ME REDIRIJAS A UNA NUEVA \"url\" QUE VA A SER EL INICIO(/) \n    // Y VAS A TOMAR DE REFERENCIA LA \"url\" QUE VIENE DE LA SOLICITUD DEL async(req)\n    if (session && (pathname == \"/login\" || pathname == \"/register\")) {\n        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.redirect(new URL(\"/\", req.url));\n    }\n    // ESTO ES PARA PROTEGER LA RUTA PROTEGIDA CUANDO EL USUARIO AUN NO INICIO SESION Y QUIERE VULNERAR COLOCANDO UNA RUTA QUE SOLO USUARIOS AUTENTICADOS PUEDEN ENTRAR A VER EL CONTENIDO DE ESA PAGINA\n    // ESTO ES PARA QUE CONTINUE TODO BIEN\n    return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.next();\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vc3JjL21pZGRsZXdhcmUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEseUVBQXlFO0FBQ3pFLHNDQUFzQztBQUN0QyxzREFBc0Q7QUFDdEQsZ0ZBQWdGO0FBQ2hGLDhGQUE4RjtBQUNqRTtBQUNjO0FBRTNDLHNEQUFzRDtBQUN0RCx1REFBdUQ7QUFDdkQsc0VBQXNFO0FBQ3RFLGlFQUFlQSwyQ0FBSUEsQ0FBQyxPQUFNRTtJQUN0Qix1RUFBdUU7SUFDdkUsdUNBQXVDO0lBQ3ZDLDJDQUEyQztJQUMzQywwRUFBMEU7SUFDMUUsTUFBTUMsV0FBV0QsSUFBSUUsT0FBTyxDQUFDRCxRQUFRO0lBQ3JDLHlEQUF5RDtJQUN6RCx3QkFBd0I7SUFDeEIsZ0RBQWdEO0lBQ2hELDZCQUE2QjtJQUU3QiwrREFBK0Q7SUFDL0QsTUFBTUUsVUFBVSxNQUFNTCwyQ0FBSUE7SUFFMUIsd1FBQXdRO0lBQ3hRLGlHQUFpRztJQUNqRyxpREFBaUQ7SUFDakQscUZBQXFGO0lBQ3JGLDhDQUE4QztJQUM5Qyx3REFBd0Q7SUFDeEQsMEVBQTBFO0lBQzFFLGdGQUFnRjtJQUNoRixJQUFHSyxXQUFZRixDQUFBQSxZQUFZLFlBQVlBLFlBQVksV0FBVSxHQUFHO1FBQzVELE9BQU9GLHFEQUFZQSxDQUFDSyxRQUFRLENBQUMsSUFBSUMsSUFBSSxLQUFLTCxJQUFJTSxHQUFHO0lBQ3JEO0lBRUEsb01BQW9NO0lBRXBNLHNDQUFzQztJQUN0QyxPQUFPUCxxREFBWUEsQ0FBQ1EsSUFBSTtBQUU1QixFQUFFLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL21pZGRsZXdhcmUudHM/ZDE5OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1Byb3RlZ2UgcnV0YXMgY29uIGF1dGVudGljYWNpw7NuIHVzYW5kbyBsYSBmdW5jacOzbiBhdXRoIGNvbW8gbWlkZGxld2FyZS5cclxuLy8gYm9ycmFtb3MgZWwgYXMgbWlkZGxld2FyZSBxdWUgdGVuaWFcclxuLy8gRVJBIEFTSSBleHBvcnQgeyBhdXRoIGFzIG1pZGRsZXdhcmUgfSBmcm9tIFwiQC9hdXRoXCJcclxuLy8gUEVSTyBOT1MgU0FMRFJJQSBFUlJPUiBQT1JRVUUgTkVDRVNJVEEgSU1QT1JUQVIgTE8gU0lHVUlFTlRFIFkgWUEgTk8gRVhQT1JUQVJcclxuLy8gWSBJTVBPUlRBTU9TIEVTRSBcImF1dGhcIiBERSBFTCBBUkNISVZPIFwiYXV0aC50c1wiIGRvbmRlIHNhbGUgbG9zIG1ldG9kb3Mgc2lnbkluLCBzaWduT3V0LCBldGNcclxuaW1wb3J0IHsgYXV0aCB9IGZyb20gXCJAL2F1dGhcIlxyXG5pbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tIFwibmV4dC9zZXJ2ZXJcIjtcclxuXHJcbi8vIEVYUE9SVEFNT1MgUE9SIERFRkVDVE8gTEEgRlVOQ0lPTiBRVUUgRVMgRUwgXCJhdXRoXCIgXHJcbi8vIFkgREVOVFJPIERFIEVTRSBcImF1dGhcIiBDUkVBTU9TIFVOQSBGVU5DSU9OIEFTSU5DUk9OQVxyXG4vLyBET05ERSBWQU1PUyBBIFBPTkVSIE5VRVNUUkEgTE9HSUNBIEVYVFJBIFBBUkEgUFJPVEVHRVIgTlVFU1RSQSBSVVRBXHJcbmV4cG9ydCBkZWZhdWx0IGF1dGgoYXN5bmMocmVxKSA9PntcclxuICAgIC8vIFwicGF0aG5hbWVcIiB2YSBhbG1hY2VuYXIgbGEgcnV0YSBhIGxhIHF1ZSBzZSBlc3RhIGludGVudGFuZG8gaW5ncmVzYXJcclxuICAgIC8vIEVTTyBFUyBMTyBRVUUgTUFORUpBIEVMIFwibWlkZGxld2FyZVwiXHJcbiAgICAvLyBZIExBIE9CVEVORU1PUyBERSBcInJlcS5uZXh0VXJsLnBhdGhuYW1lXCJcclxuICAgIC8vIFwicGF0aG5hbWVcIiBMTyBRVUUgQ09OVElFTkUgRVMgTEEgUlVUQSBBIExBIFFVRSBBUFVOVEFNT1MgQSBJUiBPIE5BVkVHQVJcclxuICAgIGNvbnN0IHBhdGhuYW1lID0gcmVxLm5leHRVcmwucGF0aG5hbWU7XHJcbiAgICAvLyBDT04gRVNUT1MgVkVNT1MgQ09NTyBGVU5DSU9OQSBPU0VBIENPTU8gTk9TIERBIExBIFJVVEFcclxuICAgIC8vY29uc29sZS5sb2cocGF0aG5hbWUpO1xyXG4gICAgLy8gTEUgQ09MT0NBTU9TIEVTVE8gUEFSQSBRVUUgVE9ETyBGVU5DSU9ORSBCSUVOXHJcbiAgICAvL3JldHVybiBOZXh0UmVzcG9uc2UubmV4dCgpO1xyXG5cclxuICAgIC8vIERFQ0xBUkFNT1MgXCJzZXNzaW9uXCIgWSBPQlRFTkVNT1MgTEEgXCJzZXNzaW9uXCIgZGUgXCJuZXh0IGF1dGhcIlxyXG4gICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGF1dGgoKTtcclxuXHJcbiAgICAvLyBFU1RPIEVTIFBBUkEgUFJPVEVHRVIgQ1VBTkRPIFlBIEVMIFVTVUFSSU8gRVNUQSBERU5UUk8gREUgTEEgUEFHSU5BIERFU1BVRVMgREUgXCJJTklDSUFSIFNFU0lPTlwiIFkgQ1VBTkRPIEVOIExBIFJVVEEgREVMIE5BVkVHQURPUiBQT05HQSBcIi9sb2dpblwiIE8gXCIvcmVnaXN0ZXJcIiBZQSBOTyBMT1MgUEVSTUlUQSBJUiBBSEkgUE9SUVVFIFlBIEVTVEFOIERFTlRSTyBBVU5URU5USUNBRE9TIFkgU09MTyBQT0RSSUFOIFZFUkxPIFNJIFwiQ0lFUlJBTiBTRVNJT05cIlxyXG4gICAgLy8gQUNBIExFIERFQ0lNT1MgUVVFIFNJIExBIFwic2Vzc2lvblwiIEVYSVNURSBZIExBIFJVVEEgRU4gTEEgUVVFIFlPIEVTVE9ZIEFDVFVBTE1FTlRFIEVTIFwiL2xvZ2luXCJcclxuICAgIC8vIE8gU0kgTEEgUlVUQSBFTiBMQSBRVUUgWU8gRVNUT1kgRVMgXCIvcmVnaXN0ZXJcIlxyXG4gICAgLy8gQSBFU1RPIExFIENPTE9DQU1PUyBwYXJlbnRlc2lzXCIoKVwiIHBhdGhuYW1lID09IFwiL2xvZ2luXCIgfHwgcGF0aG5hbWUgPT0gXCIvcmVnaXN0ZXJcIlxyXG4gICAgLy8gUEFSQSBRVUUgUkVBTElDRSBMQSBWQUxJREFDSU9OIEVOIENPTkpVTlRBIFxyXG4gICAgLy8gRU5UT05DRVMgU0kgRVMgQUxHVU5BIERFIEVTQVMgMiBZIExBIFwic2Vzc2lvblwiIEVYSVNURVxyXG4gICAgLy8gWU8gUVVJRVJPIFFVRSBNRSBSRURJUklKQVMgQSBVTkEgTlVFVkEgXCJ1cmxcIiBRVUUgVkEgQSBTRVIgRUwgSU5JQ0lPKC8pIFxyXG4gICAgLy8gWSBWQVMgQSBUT01BUiBERSBSRUZFUkVOQ0lBIExBIFwidXJsXCIgUVVFIFZJRU5FIERFIExBIFNPTElDSVRVRCBERUwgYXN5bmMocmVxKVxyXG4gICAgaWYoc2Vzc2lvbiAmJiAocGF0aG5hbWUgPT0gXCIvbG9naW5cIiB8fCBwYXRobmFtZSA9PSBcIi9yZWdpc3RlclwiKSl7XHJcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5yZWRpcmVjdChuZXcgVVJMKFwiL1wiLCByZXEudXJsKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRVNUTyBFUyBQQVJBIFBST1RFR0VSIExBIFJVVEEgUFJPVEVHSURBIENVQU5ETyBFTCBVU1VBUklPIEFVTiBOTyBJTklDSU8gU0VTSU9OIFkgUVVJRVJFIFZVTE5FUkFSIENPTE9DQU5ETyBVTkEgUlVUQSBRVUUgU09MTyBVU1VBUklPUyBBVVRFTlRJQ0FET1MgUFVFREVOIEVOVFJBUiBBIFZFUiBFTCBDT05URU5JRE8gREUgRVNBIFBBR0lOQVxyXG5cclxuICAgIC8vIEVTVE8gRVMgUEFSQSBRVUUgQ09OVElOVUUgVE9ETyBCSUVOXHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLm5leHQoKTtcclxuXHJcbn0pO1xyXG4iXSwibmFtZXMiOlsiYXV0aCIsIk5leHRSZXNwb25zZSIsInJlcSIsInBhdGhuYW1lIiwibmV4dFVybCIsInNlc3Npb24iLCJyZWRpcmVjdCIsIlVSTCIsInVybCIsIm5leHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./src/middleware.ts\n");

/***/ })

});