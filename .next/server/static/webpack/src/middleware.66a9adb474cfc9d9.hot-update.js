"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src/middleware",{

/***/ "(middleware)/./src/auth.ts":
/*!*********************!*\
  !*** ./src/auth.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   handlers: () => (/* binding */ handlers),\n/* harmony export */   signIn: () => (/* binding */ signIn),\n/* harmony export */   signOut: () => (/* binding */ signOut)\n/* harmony export */ });\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth */ \"(middleware)/./node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/credentials */ \"(middleware)/./node_modules/next-auth/providers/credentials.js\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/prisma */ \"(middleware)/./src/lib/prisma.ts\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bcryptjs */ \"(middleware)/./node_modules/bcryptjs/dist/bcrypt.js\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_3__);\n//Define la lógica de autenticación (proveedores, funciones signIn, signOut, etc.).\n\n// ESTE ES EL PROVEEDOR QUE NOSOTROS ESTAMOS USANDO \n\n\n\nconst { handlers, signIn, signOut, auth } = (0,next_auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n    providers: [\n        // AQUI NOSOTROS TENEMOS QUE CREAR EL INICIO DE SESION DE LA AUTENTICACION CON CREDENTIALS\n        // LE VAMOS A ESTAR DICIENDO QUE VAMOS A RECIBIR EL \"email\" y \"contraseña\"\n        // \n        (0,next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n            credentials: {\n                email: {},\n                password: {}\n            },\n            // CUANDO NOSOTROS ENVIAMOS LOS DATOS AQUI ES DONDE SE VA A MANEJAR LA AUNTETICACION\n            // ES EL METODO \"authorize\" QUE ES UNA FUNCION ASINCRONA\n            // ESTA FUNCION ASINCRONA VA A ESTAR RECIBIENDO LAS CREDENCIALES QUE NOSOTROS VAMOS A ESTAR MANDANDO\n            //(credentials) ESTAS CREDENCIALES VAN A OBTENER 2 COSAS\n            // VA A OBTENER EL \"email\" y la \"contraseña\" QUE NOSOTROS LE ESTAMOS MANDANDO\n            authorize: async (credentials)=>{\n                // AQUI ES DONDE NOSOTROS EJECUTAMOS LA LOGICA DEL INICIO DE SESION\n                // AQUI LO QUE VAMOS A HACER ES ONTENER AL USUARIO DE PRISMA\n                // EL \"email\" QUE A NOSOTROS NOS LLEGA VAMOS A ESTAR FILTRANDO A ESE USUARIO, VAMOS A ESTAR BUSCANDOLO \n                // LE DECIMOS COLOCAMOS UNA CONDICIONAL(?) Y Le DECIMOS QUE LO TOMO COMO UN \"string\"\n                const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__[\"default\"].user.findUnique({\n                    where: {\n                        email: credentials?.email\n                    }\n                });\n                // UNA VEZ NOSOTROS OBTENEMOS AL USUARIO AHI POR EL \"email\" \n                // AQUI LO QUE HACEMOS ES VERIFICAR SI LA CONTRASEÑA QUE NOS ESTAN ENVIANDO DEL FORMULARIO ES CORRECTA O NO\n                // PRIMERO VERIFICAMOS SI EL USUARIO EXISTE\n                // SI EL USUARIO EXISTE AQUI VERIFICAMOS LA CONTRASEÑA\n                if (user) {\n                    // AQUI PRIMERO LE VAMOS A PASAR LO QUE ES LA CONTASEÑA COMO TAL \n                    // Y LUEGO LE PASAMOS LO QUE ES EL HASH(QUE EL HASH LO TENEMOS EN LO QUE ES EL \"user.password\")\n                    // ACA TAMBIEN LO TOMAMOS COMO UN \"string\" A EL \"password\"\n                    // EL METODO \"compare\" LO QUE HACE ES COMPARAR EL password credentials como \"string\" QUE ESTAMOS PASANDO CON EL PASWARD HASHEADO QUE VIENE A SER \"user.password\" que viene de la base de datos\n                    // Y SI LAS CONTRASEÑAS COINCIDEN DEVUELVE TRUE Y SI NO DEVUELVEN FALSE\n                    const correctPassword = await bcryptjs__WEBPACK_IMPORTED_MODULE_3___default().compare(credentials?.password, user.password);\n                    // ACA LE VAMOS A DECIR QUE SI LA CONTRASEÑA ES CORRECTA ( PODEMOS DEVOLVER AL USUARIO COMPLETO) PERO EN ESTE CASO ME VAS A DEVOLVER EL \"id del usuario\", el \"email del usuario\" y el \"nombre del usuario\"\n                    if (correctPassword) {\n                        return {\n                            id: user.id,\n                            email: user.email,\n                            name: user.username\n                        };\n                    } else {}\n                }\n                // Y SI EL USUARIO NO EXISTE VERIFICAMOS SIMPLEMENTE DEVOLVEMOS UN ERROR \n                throw new Error(\"El usuario no existe\");\n            }\n        })\n    ]\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vc3JjL2F1dGgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsbUZBQW1GO0FBRW5EO0FBQ2hDLG9EQUFvRDtBQUNNO0FBQ3hCO0FBQ0o7QUFFdkIsTUFBTSxFQUFFSSxRQUFRLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEVBQUUsR0FBR1AscURBQVFBLENBQUM7SUFFMURRLFdBQVc7UUFDWCwwRkFBMEY7UUFDMUYsMEVBQTBFO1FBQzFFLEdBQUc7UUFDRFAsMkVBQVdBLENBQUM7WUFDVlEsYUFBWTtnQkFDWkMsT0FBTSxDQUFDO2dCQUNQQyxVQUFVLENBQUM7WUFDWDtZQUNJLG9GQUFvRjtZQUMxRix3REFBd0Q7WUFDeEQsb0dBQW9HO1lBQ3BHLHdEQUF3RDtZQUN4RCw2RUFBNkU7WUFDN0VDLFdBQVcsT0FBT0g7Z0JBQ2hCLG1FQUFtRTtnQkFDbkUsNERBQTREO2dCQUM1RCx1R0FBdUc7Z0JBQ3ZHLG9GQUFvRjtnQkFDcEYsTUFBTUksT0FBTyxNQUFNWCxtREFBTUEsQ0FBQ1csSUFBSSxDQUFDQyxVQUFVLENBQUM7b0JBQUNDLE9BQU07d0JBQUNMLE9BQU9ELGFBQWFDO29CQUFnQjtnQkFDdEY7Z0JBQ0EsNERBQTREO2dCQUM1RCwyR0FBMkc7Z0JBQzNHLDJDQUEyQztnQkFDM0Msc0RBQXNEO2dCQUN0RCxJQUFHRyxNQUFLO29CQUNOLGlFQUFpRTtvQkFDakUsK0ZBQStGO29CQUMvRiwwREFBMEQ7b0JBQzFELDhMQUE4TDtvQkFDOUwsdUVBQXVFO29CQUN2RSxNQUFNRyxrQkFBa0IsTUFBTWIsdURBQWMsQ0FBQ00sYUFBYUUsVUFBb0JFLEtBQUtGLFFBQVE7b0JBRTNGLDBNQUEwTTtvQkFDMU0sSUFBR0ssaUJBQWdCO3dCQUNqQixPQUFPOzRCQUFFRSxJQUFJTCxLQUFLSyxFQUFFOzRCQUFFUixPQUFPRyxLQUFLSCxLQUFLOzRCQUFFUyxNQUFNTixLQUFLTyxRQUFRO3dCQUFBO29CQUM5RCxPQUFPLENBRVA7Z0JBRUY7Z0JBQ0EseUVBQXlFO2dCQUN6RSxNQUFNLElBQUlDLE1BQU07WUFFbEI7UUFDQTtLQUVEO0FBQ0gsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvYXV0aC50cz82MmQ5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vRGVmaW5lIGxhIGzDs2dpY2EgZGUgYXV0ZW50aWNhY2nDs24gKHByb3ZlZWRvcmVzLCBmdW5jaW9uZXMgc2lnbkluLCBzaWduT3V0LCBldGMuKS5cclxuXHJcbmltcG9ydCBOZXh0QXV0aCBmcm9tIFwibmV4dC1hdXRoXCJcclxuLy8gRVNURSBFUyBFTCBQUk9WRUVET1IgUVVFIE5PU09UUk9TIEVTVEFNT1MgVVNBTkRPIFxyXG5pbXBvcnQgQ3JlZGVudGlhbHMgZnJvbSBcIm5leHQtYXV0aC9wcm92aWRlcnMvY3JlZGVudGlhbHNcIjtcclxuaW1wb3J0IHByaXNtYSBmcm9tIFwiLi9saWIvcHJpc21hXCI7XHJcbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0anMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHsgaGFuZGxlcnMsIHNpZ25Jbiwgc2lnbk91dCwgYXV0aCB9ID0gTmV4dEF1dGgoe1xyXG5cclxuICBwcm92aWRlcnM6IFtcclxuICAvLyBBUVVJIE5PU09UUk9TIFRFTkVNT1MgUVVFIENSRUFSIEVMIElOSUNJTyBERSBTRVNJT04gREUgTEEgQVVURU5USUNBQ0lPTiBDT04gQ1JFREVOVElBTFNcclxuICAvLyBMRSBWQU1PUyBBIEVTVEFSIERJQ0lFTkRPIFFVRSBWQU1PUyBBIFJFQ0lCSVIgRUwgXCJlbWFpbFwiIHkgXCJjb250cmFzZcOxYVwiXHJcbiAgLy8gXHJcbiAgICBDcmVkZW50aWFscyh7XHJcbiAgICAgIGNyZWRlbnRpYWxzOntcclxuICAgICAgZW1haWw6e30sXHJcbiAgICAgIHBhc3N3b3JkOiB7fSxcclxuICAgICAgfSxcclxuICAgICAgICAgIC8vIENVQU5ETyBOT1NPVFJPUyBFTlZJQU1PUyBMT1MgREFUT1MgQVFVSSBFUyBET05ERSBTRSBWQSBBIE1BTkVKQVIgTEEgQVVOVEVUSUNBQ0lPTlxyXG4gICAgLy8gRVMgRUwgTUVUT0RPIFwiYXV0aG9yaXplXCIgUVVFIEVTIFVOQSBGVU5DSU9OIEFTSU5DUk9OQVxyXG4gICAgLy8gRVNUQSBGVU5DSU9OIEFTSU5DUk9OQSBWQSBBIEVTVEFSIFJFQ0lCSUVORE8gTEFTIENSRURFTkNJQUxFUyBRVUUgTk9TT1RST1MgVkFNT1MgQSBFU1RBUiBNQU5EQU5ET1xyXG4gICAgLy8oY3JlZGVudGlhbHMpIEVTVEFTIENSRURFTkNJQUxFUyBWQU4gQSBPQlRFTkVSIDIgQ09TQVNcclxuICAgIC8vIFZBIEEgT0JURU5FUiBFTCBcImVtYWlsXCIgeSBsYSBcImNvbnRyYXNlw7FhXCIgUVVFIE5PU09UUk9TIExFIEVTVEFNT1MgTUFOREFORE9cclxuICAgIGF1dGhvcml6ZTogYXN5bmMgKGNyZWRlbnRpYWxzKSA9PntcclxuICAgICAgLy8gQVFVSSBFUyBET05ERSBOT1NPVFJPUyBFSkVDVVRBTU9TIExBIExPR0lDQSBERUwgSU5JQ0lPIERFIFNFU0lPTlxyXG4gICAgICAvLyBBUVVJIExPIFFVRSBWQU1PUyBBIEhBQ0VSIEVTIE9OVEVORVIgQUwgVVNVQVJJTyBERSBQUklTTUFcclxuICAgICAgLy8gRUwgXCJlbWFpbFwiIFFVRSBBIE5PU09UUk9TIE5PUyBMTEVHQSBWQU1PUyBBIEVTVEFSIEZJTFRSQU5ETyBBIEVTRSBVU1VBUklPLCBWQU1PUyBBIEVTVEFSIEJVU0NBTkRPTE8gXHJcbiAgICAgIC8vIExFIERFQ0lNT1MgQ09MT0NBTU9TIFVOQSBDT05ESUNJT05BTCg/KSBZIExlIERFQ0lNT1MgUVVFIExPIFRPTU8gQ09NTyBVTiBcInN0cmluZ1wiXHJcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kVW5pcXVlKHt3aGVyZTp7ZW1haWw6IGNyZWRlbnRpYWxzPy5lbWFpbCBhcyBzdHJpbmcgfSxcclxuICAgICAgfSk7XHJcbiAgICAgIC8vIFVOQSBWRVogTk9TT1RST1MgT0JURU5FTU9TIEFMIFVTVUFSSU8gQUhJIFBPUiBFTCBcImVtYWlsXCIgXHJcbiAgICAgIC8vIEFRVUkgTE8gUVVFIEhBQ0VNT1MgRVMgVkVSSUZJQ0FSIFNJIExBIENPTlRSQVNFw5FBIFFVRSBOT1MgRVNUQU4gRU5WSUFORE8gREVMIEZPUk1VTEFSSU8gRVMgQ09SUkVDVEEgTyBOT1xyXG4gICAgICAvLyBQUklNRVJPIFZFUklGSUNBTU9TIFNJIEVMIFVTVUFSSU8gRVhJU1RFXHJcbiAgICAgIC8vIFNJIEVMIFVTVUFSSU8gRVhJU1RFIEFRVUkgVkVSSUZJQ0FNT1MgTEEgQ09OVFJBU0XDkUFcclxuICAgICAgaWYodXNlcil7XHJcbiAgICAgICAgLy8gQVFVSSBQUklNRVJPIExFIFZBTU9TIEEgUEFTQVIgTE8gUVVFIEVTIExBIENPTlRBU0XDkUEgQ09NTyBUQUwgXHJcbiAgICAgICAgLy8gWSBMVUVHTyBMRSBQQVNBTU9TIExPIFFVRSBFUyBFTCBIQVNIKFFVRSBFTCBIQVNIIExPIFRFTkVNT1MgRU4gTE8gUVVFIEVTIEVMIFwidXNlci5wYXNzd29yZFwiKVxyXG4gICAgICAgIC8vIEFDQSBUQU1CSUVOIExPIFRPTUFNT1MgQ09NTyBVTiBcInN0cmluZ1wiIEEgRUwgXCJwYXNzd29yZFwiXHJcbiAgICAgICAgLy8gRUwgTUVUT0RPIFwiY29tcGFyZVwiIExPIFFVRSBIQUNFIEVTIENPTVBBUkFSIEVMIHBhc3N3b3JkIGNyZWRlbnRpYWxzIGNvbW8gXCJzdHJpbmdcIiBRVUUgRVNUQU1PUyBQQVNBTkRPIENPTiBFTCBQQVNXQVJEIEhBU0hFQURPIFFVRSBWSUVORSBBIFNFUiBcInVzZXIucGFzc3dvcmRcIiBxdWUgdmllbmUgZGUgbGEgYmFzZSBkZSBkYXRvc1xyXG4gICAgICAgIC8vIFkgU0kgTEFTIENPTlRSQVNFw5FBUyBDT0lOQ0lERU4gREVWVUVMVkUgVFJVRSBZIFNJIE5PIERFVlVFTFZFTiBGQUxTRVxyXG4gICAgICAgIGNvbnN0IGNvcnJlY3RQYXNzd29yZCA9IGF3YWl0IGJjcnlwdC5jb21wYXJlKGNyZWRlbnRpYWxzPy5wYXNzd29yZCBhcyBzdHJpbmcsIHVzZXIucGFzc3dvcmQpXHJcblxyXG4gICAgICAgIC8vIEFDQSBMRSBWQU1PUyBBIERFQ0lSIFFVRSBTSSBMQSBDT05UUkFTRcORQSBFUyBDT1JSRUNUQSAoIFBPREVNT1MgREVWT0xWRVIgQUwgVVNVQVJJTyBDT01QTEVUTykgUEVSTyBFTiBFU1RFIENBU08gTUUgVkFTIEEgREVWT0xWRVIgRUwgXCJpZCBkZWwgdXN1YXJpb1wiLCBlbCBcImVtYWlsIGRlbCB1c3VhcmlvXCIgeSBlbCBcIm5vbWJyZSBkZWwgdXN1YXJpb1wiXHJcbiAgICAgICAgaWYoY29ycmVjdFBhc3N3b3JkKXtcclxuICAgICAgICAgIHJldHVybiB7IGlkOiB1c2VyLmlkLCBlbWFpbDogdXNlci5lbWFpbCwgbmFtZTogdXNlci51c2VybmFtZX07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgICAgLy8gWSBTSSBFTCBVU1VBUklPIE5PIEVYSVNURSBWRVJJRklDQU1PUyBTSU1QTEVNRU5URSBERVZPTFZFTU9TIFVOIEVSUk9SIFxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbCB1c3VhcmlvIG5vIGV4aXN0ZVwiKTtcclxuXHJcbiAgICB9LFxyXG4gICAgfSxcclxuICApLFxyXG4gIF0sXHJcbn0pO1xyXG4iXSwibmFtZXMiOlsiTmV4dEF1dGgiLCJDcmVkZW50aWFscyIsInByaXNtYSIsImJjcnlwdCIsImhhbmRsZXJzIiwic2lnbkluIiwic2lnbk91dCIsImF1dGgiLCJwcm92aWRlcnMiLCJjcmVkZW50aWFscyIsImVtYWlsIiwicGFzc3dvcmQiLCJhdXRob3JpemUiLCJ1c2VyIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwiY29ycmVjdFBhc3N3b3JkIiwiY29tcGFyZSIsImlkIiwibmFtZSIsInVzZXJuYW1lIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./src/auth.ts\n");

/***/ })

});